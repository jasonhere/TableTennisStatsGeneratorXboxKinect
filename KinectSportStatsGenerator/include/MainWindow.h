#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QtGui/QMainWindow>
#include <QGLContext>
#include <QMdiArea>
#include <QPushButton>
#include <QComboBox>
#include <QLabel>
#include <QDoubleSpinBox>

#include "ExtendedQMdiSubWindow.h"
#include "KinectInterface.h"

/// @file MainWindow.h
/// @brief This is the MainWindow Class which is generated by the Ui file, if we wish to add anything to the main
/// Ui we add it here
/// @author Jonathan Macey
/// @version 1.0
/// @date 10/10/10
/// Revision History :
/// Initial Version 10/10/10 (Binary day ;-0 )
/// @class MainWindow
/// @brief the main re-sizable window which contains a StatsVisualization widget used to hold our
/// basic gl applications

class StatsVisualization;
class BallPointsProcessing;
class BallTrackingUtility;
class BallTrackingVisualization;
class DepthDebugVisualization;
class RGBboundsVisualization;
class PlayerData;

typedef enum
{
    TRACKING_WINDOW,
    VISUALISATION_WINDOW
}WHICH_WINDOW;

class MainWindow : public QMainWindow
{
Q_OBJECT
public:
    /// @brief constructor
    /// @param _parent the parent window the for this window
    MainWindow(
                QWidget *_parent = 0
               );
    /// @brief  dtor free up the StatsVisualization and all resources
    ~MainWindow();

    void deleteCurrentStatsvz();
    void deleteCurrentTrackingvz();
    void deleteCurrentRGBvz();
    void deleteCurrentDepthvz();

private slots :

    void toggleMasterRigCheck(int _inputState);
    void setTrackingFlag();
    void setWhichStatToView(int _whichStat);
    void setWhoseStatToView(int _whoseStat);
    void readFile();
    void processTrackingData();

    void buildImportWindowSetUp();
    void buildLiveWindowSetUp();
    void buildTrackingVzWindowSetUp();

protected :
    /// @brief override the keyPressEvent inherited from QObject so we can handle key presses.
    /// @param [in] _event the event to process
    void keyPressEvent(
                       QKeyEvent *_event
                      );
/// @brief override the resizeEvent inherited from QObject so we can handle key presses.
/// @param [in] _event the event to process

    void resizeEvent (
                      QResizeEvent * _event
                     );

private:
        QMdiArea *m_mdiArea;
        KinectInterface *m_kinect;

        QToolBar *m_toolbar,*m_toolbarOrig, *m_toolBarStart,*m_toolbarImport,*m_toolbarPlayer;

         // live system tools
         QPushButton *m_startTracking;
         QPushButton *processStats;
         QPushButton *m_writeFile;
         QComboBox *m_quadSelection;
         QComboBox *m_playerSelection;
         QComboBox *m_statsSelection;


         // to setup the system
         QLabel *m_lowerDepthLabel;
         QDoubleSpinBox *m_depthVolumeLowerThresh;
         QLabel *m_higherDepthLabel;
         QDoubleSpinBox *m_depthVolumeHigherThresh;
         QLabel *m_lowerBinLabel;
         QDoubleSpinBox *m_binLowerSpinBox;
         QLabel *m_cannyLowerLabel;
         QDoubleSpinBox *m_cannyLowerSpinBox;
         QLabel *m_cannyHigherLabel;
         QDoubleSpinBox *m_cannyHigherSpinBox;
         QLabel *m_contourAreaLabel;
         QDoubleSpinBox *m_contourAreaThresh;
         QLabel *m_impPointDepthMinLabel;
         QDoubleSpinBox *m_impactPtMinDepth;
         QLabel *m_impPointDepthMaxLabel;
         QDoubleSpinBox *m_impactPtMaxDepth;
         QLabel *m_diffAreaLabel;
         QDoubleSpinBox *m_diffAreaThresh;
         QLabel *m_ellipseLabel;
         QSlider *m_ellipseSize;
         QLabel *m_blurLabel;
         QSlider *m_blurSize;
         QLabel *m_dialationLabel;
         QSlider *m_dialation;
         QLabel *m_choosePlayerLabel;
         QLabel *m_chooseStatsLabel;
         QLabel *m_chooseCourtSideLabel;
         QLabel *m_distanceToTableLabel;
         QDoubleSpinBox *m_kinectToPlayArea;
         QLabel *m_diameterBallLabel;
         QDoubleSpinBox *m_diameterOfBall;

         // have to delete these in destructor
         StatsVisualization *m_vz;
         BallPointsProcessing *m_processingUtility;
         BallTrackingUtility *m_trackingInBackground;
         BallTrackingVisualization *m_trackingInForeground;
         DepthDebugVisualization *m_depthVz;
         RGBboundsVisualization *m_rgb;
         PlayerData *m_playerA,*m_playerB;

         bool m_liveWindowBuilt;

         void killExistingWindows();

         void setImportToolBarVisibility(bool _visibility);
         void setLiveStartUpToolBarVisibility(bool _visibility);
         void setLiveSetUpToolBarVisibility(bool _visibility);
         void setPlayerToolBarVisibility(bool _visibility);


};



#endif // MAINWINDOW_H
